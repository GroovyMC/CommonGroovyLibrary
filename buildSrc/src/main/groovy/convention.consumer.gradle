plugins {
    id 'convention.shared'
}

configurations {
    for (def sourceSet in ['main', 'extension', 'transform']) {
        for (def type in ['Java', 'Groovy', 'Resources']) {
            create("${sourceSet}Common${type}") {
                canBeResolved = true
            }
        }
    }
}

dependencies {
    allCompileOnly project(path: ':common', configuration: 'exportedClasses')
    for (def sourceSet in ['main', 'extension', 'transform']) {
        for (def type in ['Java', 'Groovy', 'Resources']) {
            add("${sourceSet}Common${type}", project(path: ':common', configuration: "${sourceSet}Common${type}"))
        }
    }
}

for (def sourceSet in ['main', 'extension', 'transform']) {
    var java = sourceSets.named(sourceSet).get().getCompileTaskName('java')
    var groovy = sourceSets.named(sourceSet).get().getCompileTaskName('groovy')
    var resources = sourceSets.named(sourceSet).get().getProcessResourcesTaskName()
    tasks.named(java, JavaCompile) {
        dependsOn(configurations.named("${sourceSet}CommonJava"))
        source(configurations.named("${sourceSet}CommonJava"))
    }
    tasks.named(groovy, GroovyCompile) {
        dependsOn(configurations.named("${sourceSet}CommonGroovy"))
        source(configurations.named("${sourceSet}CommonGroovy"))
    }
    tasks.named(resources, ProcessResources) {
        dependsOn(configurations.named("${sourceSet}CommonResources"))
        from(configurations.named("${sourceSet}CommonResources"))
    }
}

tasks.named("sourcesJar", Jar) {
    for (def sourceSet in ['main', 'extension', 'transform']) {
        for (def type in ['Java', 'Groovy', 'Resources']) {
            dependsOn(configurations.named("${sourceSet}Common${type}"))
            from(configurations.named("${sourceSet}Common${type}"))
        }
    }
}
