plugins {
    id 'convention.shared'
}

configurations {
    for (def sourceSet in ['main', 'extension', 'transform']) {
        for (def type in ['Java', 'Groovy', 'Resources', 'Exported']) {
            maybeCreate("${sourceSet}Common${type}").tap {
                it.canBeResolved = true
            }
        }
    }

    testCompileOnly.extendsFrom mainCommonExported
    testCompileOnly.extendsFrom extensionCommonExported
    testCompileOnly.extendsFrom transformCommonExported

    compileOnly.extendsFrom mainCommonExported
    compileOnly.extendsFrom extensionCommonExported
    compileOnly.extendsFrom transformCommonExported
    transformCompileOnly.extendsFrom transformCommonExported
    transformCompileOnly.extendsFrom extensionCommonExported
    extensionCompileOnly.extendsFrom extensionCommonExported
}

dependencies {
    for (def sourceSet in ['main', 'extension', 'transform']) {
        for (def type in ['Java', 'Groovy', 'Resources', 'Exported']) {
            add("${sourceSet}Common${type}", project(path: ':common', configuration: "${sourceSet}Common${type}"))
        }
    }
}

for (def sourceSet in ['main', 'extension', 'transform']) {
    var java = sourceSets.named(sourceSet).get().getCompileTaskName('java')
    var groovy = sourceSets.named(sourceSet).get().getCompileTaskName('groovy')
    var resources = sourceSets.named(sourceSet).get().getProcessResourcesTaskName()
    def javaConf = configurations.named("${sourceSet}CommonJava").get()
    def groovyConf = configurations.named("${sourceSet}CommonGroovy").get()
    def resourcesConf = configurations.named("${sourceSet}CommonResources").get()
    tasks.named(java, JavaCompile).configure {
        dependsOn(javaConf)
        source(javaConf)
    }
    tasks.named(groovy, GroovyCompile).configure {
        dependsOn(groovyConf)
        source(groovyConf)
    }
    tasks.named(resources, ProcessResources).configure {
        dependsOn(resourcesConf)
        from(resourcesConf)
    }
}

tasks.named("sourcesJar", Jar).configure {
    for (def sourceSet in ['main', 'extension', 'transform']) {
        for (def type in ['Java', 'Groovy', 'Resources']) {
            def conf = configurations.named("${sourceSet}Common${type}").get()
            dependsOn(conf)
            from(conf)
        }
    }
}
