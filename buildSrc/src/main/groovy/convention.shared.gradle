plugins {
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'signing'
}

version = rootProject.version
group = rootProject.group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()

sourceSets {
    extension {
        java {}
        groovy {}
    }
    transform {
        java {}
        groovy {}
    }
}

base {
    archivesName = "cgl-${libs.versions.minecraft.get()}-${project.name}"
}

repositories {
    mavenCentral()
    maven {
        name = 'Architectury'
        url "https://maven.architectury.dev/"
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

configurations {
    rootProjectLicense.canBeResolved = true

    allCompileOnly
    compileOnly.extendsFrom allCompileOnly
    testCompileOnly.extendsFrom allCompileOnly
    extensionCompileOnly.extendsFrom allCompileOnly
    transformCompileOnly.extendsFrom allCompileOnly

    allAnnotationProcessor
    annotationProcessor.extendsFrom allAnnotationProcessor
    testAnnotationProcessor.extendsFrom allAnnotationProcessor
    extensionAnnotationProcessor.extendsFrom allAnnotationProcessor
    transformAnnotationProcessor.extendsFrom allAnnotationProcessor

    sharedCompileOnly
    allCompileOnly.extendsFrom sharedCompileOnly
    compileOnlyApi.extendsFrom sharedCompileOnly
}


dependencies {
    allCompileOnly libs.jetbrains.annotations
    allCompileOnly libs.autoservice
    //allCompileOnly libs.enhancedgroovy
    allAnnotationProcessor libs.autoservice
    rootProjectLicense project(path: ':', configuration: 'license')

    compileOnly sourceSets.transform.output
    compileOnly sourceSets.extension.output
    transformCompileOnly sourceSets.extension.output
}

tasks.named('groovydoc', Groovydoc) {
    source sourceSets.extension.allSource
    source sourceSets.transform.allSource
    use = true
}

tasks.register('groovydocJar', Jar) {
    archiveClassifier = 'javadoc'
    from groovydoc.destinationDir
    dependsOn 'groovydoc'
}

// Publish groovydoc as javadoc
configurations {
    javadocElements {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.class, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category.class, Category.DOCUMENTATION))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling.class, Bundling.EXTERNAL))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType.class, DocsType.JAVADOC))
        }
    }
}

project.components.named("java").configure {
    AdhocComponentWithVariants javaComponent = (AdhocComponentWithVariants) it
    javaComponent.addVariantsFromConfiguration(configurations.javadocElements) {}
}

artifacts {
    javadocElements groovydocJar
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

tasks.withType(GroovyCompile).configureEach {
    it.groovyOptions.fork = true
    it.groovyOptions.encoding = 'UTF-8'
    it.groovyOptions.optimizationOptions.indy = true
    it.groovyOptions.optimizationOptions.groovydoc = true
    it.groovyOptions.javaAnnotationProcessing = true
    it.groovyOptions.keepStubs = true
    it.exclude('mods.groovy')
}

processResources {
    it.exclude('mods.groovy')
}

sourcesJar {
    dependsOn(configurations.rootProjectLicense)
    from(configurations.rootProjectLicense) {
        rename { "${it}_${rootProject.name}" }
    }
    from sourceSets.extension.allSource
    from sourceSets.transform.allSource
}

jar {
    dependsOn(configurations.rootProjectLicense)
    from(configurations.rootProjectLicense) {
        rename { "${it}_${rootProject.name}" }
    }

    dependsOn tasks.named(sourceSets.extension.classesTaskName)
    from sourceSets.extension.output.classesDirs
    dependsOn tasks.named(sourceSets.transform.classesTaskName)
    from sourceSets.transform.output.classesDirs

    dependsOn tasks.named(sourceSets.extension.processResourcesTaskName)
    from sourceSets.extension.output.resourcesDir
    dependsOn tasks.named(sourceSets.transform.processResourcesTaskName)
    from sourceSets.transform.output.resourcesDir

    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : rootProject.version,
                'Implementation-Title'    : "$mod_name - ${project.name}",
                'Implementation-Version'  : rootProject.version,
                'Implementation-Vendor'   : mod_author,
                'Built-On-Minecraft'      : libs.versions.minecraft.get()
        ])
    }
}

final String signingKey = System.getenv('GPG_SIGNING_KEY') ?: ''
final String signingPassword = System.getenv('GPG_KEY_PASSWORD') ?: ''
final boolean hasSigningDetails = !signingKey.isEmpty() && !signingPassword.isEmpty()

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            pom {
                name = "CommonGroovyLibrary - ${project.name.capitalize()}".toString()
                description = 'A library for common easy Groovy mod development'
                packaging = 'jar'
                url = 'https://github.com/groovymc/CommonGroovyLibrary'
                inceptionYear = '2022'

                licenses {
                    license {
                        name = 'LGPL-3.0-or-later'
                        url = 'https://spdx.org/licenses/LGPL-3.0-or-later'
                    }
                }
                developers {
                    developer {
                        id = 'groovymc'
                        name = 'GroovyMC'
                        email = 'holdings@groovymc.org'
                        url = 'https://github.com/GroovyMC/'
                    }
                }
                scm {
                    connection='scm:git:git://github.com/groovymc/CommonGroovyLibrary.git'
                    developerConnection='scm:git:ssh://github.com/groovymc/CommonGroovyLibrary.git'
                    url='https://github.com/groovymc/CommonGroovyLibrary'
                }
            }
        }
    }
}

if (hasSigningDetails) {
    signing {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}
