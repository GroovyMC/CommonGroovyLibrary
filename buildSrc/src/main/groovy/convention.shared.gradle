plugins {
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
}

version = rootProject.version
group = rootProject.group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()

sourceSets {
    extension {
        java {}
        groovy {}
    }
    transform {
        java {}
        groovy {}
    }
}

base {
    archivesName = "cgl-${libs.versions.minecraft.get()}-${project.name}"
}

repositories {
    mavenCentral()
    maven {
        name = 'Architectury'
        url "https://maven.architectury.dev/"
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

configurations {
    rootProjectLicense.canBeResolved = true

    allCompileOnly
    compileOnly.extendsFrom allCompileOnly
    testCompileOnly.extendsFrom allCompileOnly
    extensionCompileOnly.extendsFrom allCompileOnly
    transformCompileOnly.extendsFrom allCompileOnly

    allAnnotationProcessor
    annotationProcessor.extendsFrom allAnnotationProcessor
    testAnnotationProcessor.extendsFrom allAnnotationProcessor
    extensionAnnotationProcessor.extendsFrom allAnnotationProcessor
    transformAnnotationProcessor.extendsFrom allAnnotationProcessor

    sharedCompileOnly
    allCompileOnly.extendsFrom sharedCompileOnly
    compileOnlyApi.extendsFrom sharedCompileOnly
}

dependencies {
    allCompileOnly libs.jetbrains.annotations
    allCompileOnly libs.autoservice
    //allCompileOnly libs.enhancedgroovy
    allAnnotationProcessor libs.autoservice
    rootProjectLicense project(path: ':', configuration: 'license')

    compileOnly sourceSets.transform.output
    compileOnly sourceSets.extension.output
    transformCompileOnly sourceSets.extension.output
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

tasks.withType(GroovyCompile).configureEach {
    it.groovyOptions.fork = true
    it.groovyOptions.encoding = 'UTF-8'
    it.groovyOptions.optimizationOptions.indy = true
    it.groovyOptions.optimizationOptions.groovydoc = true
    it.groovyOptions.javaAnnotationProcessing = true
    it.groovyOptions.keepStubs = true
    it.exclude('mods.groovy')
}

processResources {
    it.exclude('mods.groovy')
}

sourcesJar {
    dependsOn(configurations.rootProjectLicense)
    from(configurations.rootProjectLicense) {
        rename { "${it}_${rootProject.name}" }
    }
    from sourceSets.extension.allSource
    from sourceSets.transform.allSource
}

jar {
    dependsOn(configurations.rootProjectLicense)
    from(configurations.rootProjectLicense) {
        rename { "${it}_${rootProject.name}" }
    }

    dependsOn tasks.named(sourceSets.extension.classesTaskName)
    from sourceSets.extension.output.classesDirs
    dependsOn tasks.named(sourceSets.transform.classesTaskName)
    from sourceSets.transform.output.classesDirs

    dependsOn tasks.named(sourceSets.extension.processResourcesTaskName)
    from sourceSets.extension.output.resourcesDir
    dependsOn tasks.named(sourceSets.transform.processResourcesTaskName)
    from sourceSets.transform.output.resourcesDir

    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : rootProject.version,
                'Implementation-Title'    : "$mod_name - ${project.name}",
                'Implementation-Version'  : rootProject.version,
                'Implementation-Vendor'   : mod_author,
                'Built-On-Minecraft'      : libs.versions.minecraft.get()
        ])
    }
}
