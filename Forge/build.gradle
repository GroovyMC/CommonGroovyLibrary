plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

archivesBaseName = "cgl-${minecraft_version}-forge"

minecraft {
    mappings channel: 'parchment', version: "${parchment_minecraft_version}-${parchment_version}-${minecraft_version}"
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                cgl {
                    source sourceSets.main
                    source project(':Common').sourceSets.main
                }
                cgltest {
                    source sourceSets.test
                }
            }
        }

        client {
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
        }

        server {
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'

        }

        data {
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--mod', 'cgltest', '--all', '--output', file('src/test/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
        }
    }
}

sourceSets.main.resources.srcDir 'src/test/generated/resources'

sourceSets {
    transform {}
    test {
        compileClasspath += transform.output
    }
}
configurations {
    transformCompileOnly.extendsFrom(minecraft)
    transformCompileOnly.extendsFrom(compileOnly)
}

jarJar.enable()

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(path: ':Common', configuration: 'namedElements')

    transformCompileOnly project(path: ':Common', configuration: 'transformOut')
    testCompileOnly project(path: ':Common', configuration: 'transformOut')
    testCompileOnly project(path: ':Common', configuration: 'extensionOut')

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    transformCompileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    transformAnnotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly "com.matyrobbrt.gml:gml:${gml_version}"
    runtimeOnly("com.matyrobbrt.gml:gml:${gml_version}:all") {
        exclude module: 'transform'
    }

    minecraftEmbed("blue.endless:jankson:[$project.jankson_version,)") {
        jarJar.pin(it, project.jankson_version)
    }

    compileOnly reg.loaderSpecific()
}

tasks.named('compileGroovy', GroovyCompile) {
    source(project(':Common').sourceSets.main.allGroovy)
    source(project(':Common').sourceSets.transform.allGroovy)
    source(project(':Common').sourceSets.extension.allGroovy)
}

tasks.named('compileJava', JavaCompile) {
    source(project(':Common').sourceSets.main.allJava)
    source(project(':Common').sourceSets.transform.allJava)
    source(project(':Common').sourceSets.extension.allJava)
}

processResources {
    from project(':Common').sourceSets.main.resources
    from project(':Common').sourceSets.transform.resources
    from project(':Common').sourceSets.extension.resources
}

jar {
    classifier 'partial'
    finalizedBy('reobfJar')
    from('LICENSE') {
        rename { "${it}_${mod_name}"}
    }
    from sourceSets.transform.output
}

tasks.build.dependsOn tasks.jarJar

reobf {
    jarJar {}
}

tasks.jarJar {
    classifier ''
    finalizedBy tasks.reobfJarJar
}

reg.configureJarTask(tasks.jarJar)

sourcesJar {
    from sourceSets.transform.allSource
    from project(':Common').sourceSets.main.allSource
    from project(':Common').sourceSets.transform.allSource
    from project(':Common').sourceSets.extension.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.groovymc.cgl'
            artifactId = "cgl-${minecraft_version}-forge"
            version = project.version

            artifacts = [tasks.jarJar, sourcesJar]
            pom.withXml { node ->
                node.asNode().dependencies
                        .'*'
                        .findAll { it.artifactId.text().contains('regutils') || it.artifactId.text().contains("cgl-${minecraft_version}") || it.group.text().contains("com.matyrobbrt.gml") }
                        .each { it.parent().remove(it) }
            }
        }
    }
    repositories {
        maven {
            name = 'ModdingInquisitionMavenRepo'
            url = 'https://maven.moddinginquisition.org/releases'
            credentials {
                username = rootProject.ext.mavenUser
                password = rootProject.ext.mavenPassword
            }
        }
    }
}