import org.groovymc.modsdotgroovy.core.Platform
import org.groovymc.modsdotgroovy.gradle.tasks.AbstractGatherPlatformDetailsTask

plugins {
    id 'convention.consumer'
    alias libs.plugins.architectury.loom
    alias libs.plugins.mdg
}

modsDotGroovy {
    platform = Platform.FABRIC
    inferGather.set false
    multiplatform {
        from ':common'
    }
    apply()
}

tasks.named('gatherFabricPlatformDetails', AbstractGatherPlatformDetailsTask).configure {
    minecraftVersion = libs.versions.minecraft.get()
    platformVersion = libs.versions.fabric.loader.get()
}

loom {
    createRemapConfigurations(sourceSets.transform)
    createRemapConfigurations(sourceSets.extension)
}

registrationUtils {
    projects {
        fabric {
            type 'fabric'
        }
    }
}

dependencies {
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.mappings.get()}@zip")
    }
    minecraft libs.minecraft
    modImplementation libs.fabric.loader
    modImplementation libs.fabric.api

    modTransformCompileOnly libs.fabric.loader
    modTransformCompileOnly libs.fabric.api

    modExtensionCompileOnly libs.fabric.loader
    modExtensionCompileOnly libs.fabric.api

    api libs.jankson
    api libs.nightconfig.toml
    implementation libs.groovyduvet

    allCompileOnly libs.jankson
    allCompileOnly libs.nightconfig.toml
    allCompileOnly libs.groovyduvet

    include libs.jankson
    include libs.nightconfig.toml
    include libs.nightconfig.core

    testCompileOnly sourceSets.transform.output
    testCompileOnly sourceSets.extension.output
}

afterEvaluate {
    configurations.transformCompileClasspath.extendsFrom configurations.minecraftNamedCompile
    configurations.extensionCompileClasspath.extendsFrom configurations.minecraftNamedCompile

    dependencies {
        compileOnly reg.loaderSpecific()
        testCompileOnly reg.loaderSpecific()
        transformCompileOnly reg.loaderSpecific()
        extensionCompileOnly reg.loaderSpecific()
        transformCompileOnly reg.common()
        extensionCompileOnly reg.common()
    }
}

loom {
    mixin {
        useLegacyMixinAp = true
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

// Publishing

