import org.groovymc.modsdotgroovy.types.core.Platform
import org.groovymc.modsdotgroovy.gradle.tasks.AbstractGatherPlatformDetailsTask

plugins {
    id 'convention.consumer'
    alias libs.plugins.architectury.loom
    alias libs.plugins.mdg
}

modsDotGroovy {
    platform = Platform.NEOFORGE
    inferGather.set false
    multiplatform {
        from ':common'
    }
    apply()
}

tasks.named('gatherNeoForgePlatformDetails', AbstractGatherPlatformDetailsTask).configure {
    minecraftVersion = libs.versions.minecraft.get()
    platformVersion = libs.versions.neoforge.get()
}

registrationUtils {
    addDependencies false
    projects {
        neoforge {
            type 'neoforge'
        }
    }
}
afterEvaluate {
    reg.configureJarTask(tasks.jar)
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/'
    }
}

dependencies {
    minecraft libs.minecraft
    neoForge libs.neoforge
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.mappings.get()}@zip")
    }

    implementation libs.gml
    api libs.jankson
    include libs.jankson

    allCompileOnly libs.jankson
    allCompileOnly libs.gml
}

afterEvaluate {
    configurations.transformCompileClasspath.extendsFrom configurations.minecraftNamedCompile
    configurations.extensionCompileClasspath.extendsFrom configurations.minecraftNamedCompile

    dependencies {
        compileOnly reg.joined()
        localRuntime reg.joined()
        testCompileOnly reg.joined()
        testRuntimeOnly reg.joined()
        transformCompileOnly reg.joined()
        extensionCompileOnly reg.joined()
    }
}

loom {
    mods {
        cgltest {
            sourceSet(sourceSets.test)
        }
        main {
            sourceSet(sourceSets.extension)
            sourceSet(sourceSets.transform)
        }
    }
    runs {
        client {
            client()
            setConfigName("NeoForge Client")
            ideConfigGenerated(true)
            runDir("run")
            source(sourceSets.test)
        }
        server {
            server()
            setConfigName("NeoForge Server")
            ideConfigGenerated(true)
            runDir("run")
            source(sourceSets.test)
        }
    }
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
processResources {
    doLast {
        fileTree(dir: outputs.files.asPath, include: "mixin.*.json").each { File file ->
            def obj = new JsonSlurper().parse(file)
            if (obj.refmap) {
                obj.remove('refmap')
            }
            file.text = JsonOutput.toJson(obj)
        }
    }
}
