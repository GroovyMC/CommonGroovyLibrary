plugins {
    alias libs.plugins.mdg apply false
    alias libs.plugins.managedversioning
    alias libs.plugins.architectury.loom apply false
    alias libs.plugins.registrationutils apply false
    alias libs.plugins.nexuspublish
    alias libs.plugins.idea.ext
}

managedVersioning {
    versionFile.set rootProject.file('version.properties')

    gitHubActions {
        register('release') {
            prettyName = 'Release'
            workflowDispatch = true
            gradleJob {
                name = 'build'
                javaVersion = '21'
                step {
                    setupGitUser()
                }
                readOnly = false
                gradlew 'Tag Release', 'tagRelease'
                gradlew 'Build', 'build'
                step {
                    run = 'git push && git push --tags'
                }
                recordVersion 'Record Version', 'version'
            }
            gradleJob {
                name.set 'publish'
                javaVersion = '21'
                needs.add('build')
                readOnly = false
                gradlew 'Publish', 'publish', 'closeAndReleaseSonatypeStagingRepository'
                tag.set('${{needs.build.outputs.version}}')
                secrets 'GPG_SIGNING_KEY', 'GPG_KEY_PASSWORD', 'CENTRAL_MAVEN_USER', 'CENTRAL_MAVEN_PASSWORD'
            }
        }
    }

    apply()
}

println "Building: $version"

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
            username = System.getenv('CENTRAL_MAVEN_USER') ?: ''
            password = System.getenv('CENTRAL_MAVEN_PASSWORD') ?: ''
        }
    }
}

configurations {
    license {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    add 'license', file("LICENSE")
}

subprojects { p ->
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: libs.plugins.registrationutils.get().pluginId

    registrationUtils {
        group 'org.groovymc.cgl.reg'
    }

    jar {
        manifest {
            attributes([
                    'Implementation-Commit-Time': managedVersioning.timestamp.get(),
                    'Implementation-Commit': managedVersioning.hash.get()
            ])
        }
    }
}
