plugins {
    id 'maven-publish'
}

apply plugin: 'org.quiltmc.loom'

archivesBaseName = "cgl-${minecraft_version}-quilt"

repositories {
    maven {
        name 'Quilt (Release)'
        url 'https://maven.quiltmc.org/repository/release/'
    }
    maven {
        name 'Quilt (Snapshot)'
        url 'https://maven.quiltmc.org/repository/snapshot/'
        content {
            includeGroup 'org.quiltmc.fabric_api_qsl'
            includeGroupByRegex 'org\\.quiltmc\\.qsl(?:\\.[a-z_]+)?'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft_version}:${parchment_version}@zip")
    }
    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"
    modImplementation "io.github.lukebemish.groovyduvet:groovyduvet-core:${groovyduvet_version}"

    // We do not currently need qsl
    // modImplementation("org.quiltmc:qsl:${quilt_stdlib_version}") {
    //    	 exclude group: "net.fabricmc"
    // }

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(path: ':Common', configuration: 'namedElements')

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

    include "com.electronwill.night-config:core:$project.nightconfig_version"
    include "com.electronwill.night-config:toml:$project.nightconfig_version"
    include "blue.endless:jankson:$project.jankson_version"
}

loom {
    runs {
        client {
            client()
            setConfigName('Quilt Client')
            ideConfigGenerated(true)
            runDir('run')
        }
        server {
            server()
            setConfigName('Quilt Server')
            ideConfigGenerated(true)
            runDir('run')
        }
    }
}

processResources {
    from project(':Common').sourceSets.main.resources
    from project(':Common').sourceSets.transform.resources
    from project(':Common').sourceSets.extension.resources
}

tasks.withType(GroovyCompile).configureEach {
    it.source(project(':Common').sourceSets.main.allGroovy)
    it.source(project(':Common').sourceSets.transform.allGroovy)
    it.source(project(':Common').sourceSets.extension.allGroovy)
    it.groovyOptions.optimizationOptions.groovydoc = true
}

tasks.withType(JavaCompile).configureEach {
    source(project(':Common').sourceSets.main.allJava)
    source(project(':Common').sourceSets.transform.allJava)
    source(project(':Common').sourceSets.extension.allJava)
}

jar {
    from('LICENSE') {
        rename { "${it}_${mod_name}"}
    }
}

sourcesJar {
    from project(':Common').sourceSets.main.allSource
    from project(':Common').sourceSets.transform.allSource
    from project(':Common').sourceSets.extension.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.groovymc.cgl'
            artifactId = "cgl-${minecraft_version}-quilt"
            version = project.version
            from components.java
            pom.withXml { node ->
                node.asNode().dependencies
                        .'*'
                        .findAll { it.artifactId.text().contains('regutils') || it.artifactId.text().contains('groovyduvet') || it.artifactId.text().contains("cgl-${minecraft_version}") }
                        .each { it.parent().remove(it) }
            }
        }
    }
    repositories {
        maven {
            name = 'ModdingInquisitionMavenRepo'
            url = 'https://maven.moddinginquisition.org/releases'
            credentials {
                username = rootProject.ext.mavenUser
                password = rootProject.ext.mavenPassword
            }
        }
    }
}